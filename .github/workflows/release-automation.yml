name: Create Braiins Edition Release

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      evcc_version:
        description: 'evcc version to base release on (e.g. 0.207.4)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/evcc-io/evcc.git || true
          git fetch upstream --tags
          echo "Available upstream tags:"
          git tag -l | grep "207" || echo "No 207 tags found"

      - name: Get latest evcc release
        id: evcc_version
        run: |
          if [ "${{ github.event.inputs.evcc_version }}" != "" ]; then
            EVCC_TAG="${{ github.event.inputs.evcc_version }}"
            EVCC_TAG=${EVCC_TAG#v}
          else
            EVCC_TAG=$(git ls-remote --tags upstream | grep -o 'refs/tags/[0-9]*\.[0-9]*\.[0-9]*$' | sort -V | tail -1 | sed 's/refs\/tags\///')
            if [ -z "$EVCC_TAG" ]; then
              echo "Could not find evcc release, trying alternative method..."
              EVCC_TAG=$(curl -s https://api.github.com/repos/evcc-io/evcc/releases/latest | grep -o '"tag_name": "[^"]*' | cut -d'"' -f4)
              EVCC_TAG=${EVCC_TAG#v}
            fi
            if [ -z "$EVCC_TAG" ]; then
              echo "Could not determine evcc version, skipping release creation"
              exit 1
            fi
          fi
          echo "evcc_tag=$EVCC_TAG" >> $GITHUB_OUTPUT
          echo "evcc version: $EVCC_TAG"

      - name: Set Braiins tag
        id: braiins_version
        run: |
          EVCC_TAG="${{ steps.evcc_version.outputs.evcc_tag }}"
          BRAIINS_TAG="v${EVCC_TAG}-braiins"
          echo "braiins_tag=$BRAIINS_TAG" >> $GITHUB_OUTPUT
          echo "Braiins tag: $BRAIINS_TAG"

      - name: Check if release exists
        id: release_check
        run: |
          BRAIINS_TAG="${{ steps.braiins_version.outputs.braiins_tag }}"
          if git tag -l | grep -q "^${BRAIINS_TAG}$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Braiins release $BRAIINS_TAG already exists"
            exit 0
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Need to create Braiins release $BRAIINS_TAG"
          fi

      - name: Create release branch
        if: steps.release_check.outputs.exists == 'false'
        run: |
          BRAIINS_TAG="${{ steps.braiins_version.outputs.braiins_tag }}"
          git checkout -b "release/${BRAIINS_TAG}"
          echo "Created release branch: release/${BRAIINS_TAG}"

      - name: Get evcc source code
        if: steps.release_check.outputs.exists == 'false'
        run: |
          EVCC_TAG="${{ steps.evcc_version.outputs.evcc_tag }}"
          echo "Looking for tag: $EVCC_TAG"
          git tag -l | grep "$EVCC_TAG" && echo "Tag found locally" || echo "Tag not found locally"
          git fetch upstream "refs/tags/${EVCC_TAG}:refs/tags/${EVCC_TAG}" || echo "Could not fetch tag"
          git checkout "refs/tags/${EVCC_TAG}" -- . ':!.github' || {
            echo "Could not checkout tag ${EVCC_TAG}, trying alternative method..."
            curl -L "https://github.com/evcc-io/evcc/archive/refs/tags/${EVCC_TAG}.tar.gz" -o evcc-src.tar.gz
            tar -xzf evcc-src.tar.gz --strip-components=1
            rm evcc-src.tar.gz
          }
          git checkout master -- .github/ || echo "Could not restore .github"

      - name: Add Braiins integration
        if: steps.release_check.outputs.exists == 'false'
        run: |
          git checkout master -- charger/braiins.go || echo "braiins.go not found in master"
          git checkout master -- templates/definition/charger/braiins.yaml || echo "braiins.yaml not found in master"
          echo "Added Braiins integration files"
      
      - name: Overwrite Linter config
        if: steps.release_check.outputs.exists == 'false'
        run: cp ./.golangci.yml .

      - name: Create release documentation
        if: steps.release_check.outputs.exists == 'false'
        run: |
          EVCC_TAG="${{ steps.evcc_version.outputs.evcc_tag }}"
          BRAIINS_TAG="${{ steps.braiins_version.outputs.braiins_tag }}"
          cat > README-BRAIINS.md << 'RELEASE_README'
          # evcc - Braiins Edition
          
          Enhanced version of evcc with Braiins mining pool integration.
          
          **Base Version:** ${EVCC_TAG}
          **Braiins Edition:** ${BRAIINS_TAG}
          
          ## Changes from Original evcc:
          - Braiins mining pool charger support
          - Automatic upstream synchronization
          
          ## Original Project:
          https://github.com/evcc-io/evcc
          
          ## Installation:
          Download the appropriate binary for your platform from the Releases page.
          RELEASE_README
          sed -i "s/\${EVCC_TAG}/$EVCC_TAG/g" README-BRAIINS.md
          sed -i "s/\${BRAIINS_TAG}/$BRAIINS_TAG/g" README-BRAIINS.md
          echo "Created release documentation"

      - name: Commit and tag
        if: steps.release_check.outputs.exists == 'false'
        run: |
          EVCC_TAG="${{ steps.evcc_version.outputs.evcc_tag }}"
          BRAIINS_TAG="${{ steps.braiins_version.outputs.braiins_tag }}"
          git add .
          git commit -m "Release ${BRAIINS_TAG}: evcc ${EVCC_TAG} + Braiins integration" || echo "No changes to commit"
          git tag -a "${BRAIINS_TAG}" -m "evcc-Braiins-Edition ${BRAIINS_TAG} based on evcc ${EVCC_TAG}"
          git push origin "${BRAIINS_TAG}"
          echo "Created and pushed tag: ${BRAIINS_TAG}"

      - name: Set up Go
        if: steps.release_check.outputs.exists == 'false'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - name: Set up Node.js
        if: steps.release_check.outputs.exists == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        if: steps.release_check.outputs.exists == 'false'
        run: |
          echo "Installing dependencies..."
          make install-ui
          make install
      
      - name: Install golangci-lint
        if: steps.release_check.outputs.exists == 'false'
        run: |
          echo "Installing golangci-lint..."
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.55.2

      - name: Build Web UI
        if: steps.release_check.outputs.exists == 'false'
        run: |
          echo "Building Web UI..."
          make ui

      - name: Quality checks
        if: steps.release_check.outputs.exists == 'false'
        run: |
          echo "Running quality checks..."
          make lint-ui
          make lint
          make porcelain
          
      - name: Build evcc binaries
        if: steps.release_check.outputs.exists == 'false'
        run: |
          BRAIINS_TAG="${{ steps.braiins_version.outputs.braiins_tag }}"
          echo "Building binaries for ${BRAIINS_TAG}..."
          
          # Linux AMD64
          echo "Building Linux AMD64..."
          GOOS=linux GOARCH=amd64 make build
          mv evcc "evcc-${BRAIINS_TAG}-linux-amd64"
          
          # Linux ARM64  
          echo "Building Linux ARM64..."
          GOOS=linux GOARCH=arm64 make build
          mv evcc "evcc-${BRAIINS_TAG}-linux-arm64"
          
          # Windows
          echo "Building Windows AMD64..."
          GOOS=windows GOARCH=amd64 make build
          mv evcc.exe "evcc-${BRAIINS_TAG}-windows-amd64.exe" || mv evcc "evcc-${BRAIINS_TAG}-windows-amd64.exe"
          
          # macOS Intel
          echo "Building macOS Intel..."
          GOOS=darwin GOARCH=amd64 make build
          mv evcc "evcc-${BRAIINS_TAG}-darwin-amd64"
          
          # macOS Apple Silicon
          echo "Building macOS Apple Silicon..." 
          GOOS=darwin GOARCH=arm64 make build
          mv evcc "evcc-${BRAIINS_TAG}-darwin-arm64"
          
          echo "All binaries built successfully"
          ls -la evcc-${BRAIINS_TAG}-*

      - name: Create GitHub Release
        if: steps.release_check.outputs.exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          EVCC_TAG="${{ steps.evcc_version.outputs.evcc_tag }}"
          BRAIINS_TAG="${{ steps.braiins_version.outputs.braiins_tag }}"
          cat > release_notes.md << 'RELEASE_NOTES'
          # evcc - Braiins Edition ${BRAIINS_TAG}
          
          Enhanced version of evcc ${EVCC_TAG} with Braiins mining pool integration.
          
          ## Braiins Edition Features
          - **Braiins Charger Integration**: Native support for Braiins mining pool charging
          - **Enhanced Mining Operations**: Optimized for cryptocurrency mining setups
          - **Automatic Upstream Sync**: Stays up-to-date with official evcc releases
          
          ## Downloads
          Choose the appropriate binary for your platform:
          - **Linux AMD64**: evcc-${BRAIINS_TAG}-linux-amd64
          - **Linux ARM64**: evcc-${BRAIINS_TAG}-linux-arm64
          - **Windows**: evcc-${BRAIINS_TAG}-windows-amd64.exe
          - **macOS Intel**: evcc-${BRAIINS_TAG}-darwin-amd64
          - **macOS Apple Silicon**: evcc-${BRAIINS_TAG}-darwin-arm64
          
          ## Base Version Changes
          For complete changelog see: https://github.com/evcc-io/evcc/releases/tag/${EVCC_TAG}
          
          ## Links
          - **Original evcc**: https://github.com/evcc-io/evcc
          - **Documentation**: https://docs.evcc.io
          - **Braiins Pool**: https://braiins.com/pool
          RELEASE_NOTES
          sed -i "s/\${EVCC_TAG}/$EVCC_TAG/g" release_notes.md
          sed -i "s/\${BRAIINS_TAG}/$BRAIINS_TAG/g" release_notes.md
          gh release create "${BRAIINS_TAG}" \
            --title "evcc-Braiins-Edition ${BRAIINS_TAG}" \
            --notes-file release_notes.md \
            --draft=false \
            --prerelease=false \
            evcc-${BRAIINS_TAG}-*
          echo "GitHub Release created: ${BRAIINS_TAG}"

      - name: Cleanup
        if: always()
        run: |
          git checkout master 2>/dev/null || git checkout main 2>/dev/null || true
          git branch -D "release/${{ steps.braiins_version.outputs.braiins_tag }}" 2>/dev/null || true
          echo "Cleanup completed"
